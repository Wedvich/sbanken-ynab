variables:
  YARN_CACHE_FOLDER: $(Pipeline.Workspace)/.yarn

jobs:
  - job: frontend
    displayName: Build frontend

    pool:
      vmImage: ubuntu-20.04

    steps:
      - task: UseNode@1
        displayName: Install Node 14
        inputs:
          version: 14.x

      - task: Cache@2
        displayName: Cache dependencies
        inputs:
          key: yarn | "$(Agent.OS)" | yarn.lock
          path: $(YARN_CACHE_FOLDER)
          restoreKeys: |
            yarn | "$(Agent.OS)"
            yarn
          cacheHitVar: CACHE_RESTORED

      - script: yarn --frozen-lockfile
        displayName: Install dependencies
        condition: ne(variables.CACHE_RESTORED, 'true')

      - script: yarn lint-ci
        displayName: Lint code

      - script: yarn stylelint
        displayName: Lint styles

      - script: yarn typecheck
        displayName: Check types

      - script: yarn test-ci
        displayName: Run tests

      - task: PublishTestResults@2
        displayName: Publish test results
        continueOnError: true
        inputs:
          testResultsFiles: junit.xml

      - task: PublishCodeCoverageResults@1
        displayName: Publish test coverage
        continueOnError: true
        inputs:
          codeCoverageTool: Cobertura
          summaryFileLocation: coverage/cobertura-coverage.xml

      - script: yarn build
        displayName: Build app bundles

      - task: CopyFiles@2
        displayName: Copy build output to staging directory
        inputs:
          contents: wwwroot/**/*
          targetFolder: $(Build.ArtifactStagingDirectory)

      - task: PublishPipelineArtifact@1
        displayName: Publish build artifacts
        inputs:
          targetPath: $(Build.ArtifactStagingDirectory)
          artifact: frontend

  - job: backend
    displayName: Build backend

    pool:
      vmImage: windows-2019

    steps:
      - task: UseDotNet@2
        displayName: Install .NET 5 SDK
        inputs:
          packageType: 'sdk'
          version: '5.0.x'

      - task: DotNetCoreCLI@2
        displayName: Package artifacts
        inputs:
          command: publish
          publishWebProjects: true
          arguments: --configuration Release --output $(Build.ArtifactStagingDirectory)
          zipAfterPublish: false

      - task: PublishPipelineArtifact@1
        displayName: Publish build artifacts
        inputs:
          targetPath: $(Build.ArtifactStagingDirectory)
          artifact: backend
